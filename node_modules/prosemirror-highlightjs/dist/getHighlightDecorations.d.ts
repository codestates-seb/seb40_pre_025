import type { HLJSApi } from "highlight.js";
import type { Node as ProseMirrorNode } from "prosemirror-model";
import { Decoration } from "prosemirror-view";
interface GetHighlightDecorationsOptions {
    /**
     * A method that is called before the render process begins where any non-null return value cancels the render; useful for decoration caching on untouched nodes
     * @param block The node that is about to render
     * @param pos The position in the document of the node
     * @returns An array of the decorations that should be used instead of rendering; cancels the render if a non-null value is returned
     */
    preRenderer?: (block: ProseMirrorNode, pos: number) => Decoration[] | null;
    /**
     * A method that is called after the render process ends with the result of the node render passed; useful for decoration caching
     * @param block The node that was renderer
     * @param pos The position of the node in the document
     * @param decorations The decorations that were rendered for this node
     */
    postRenderer?: (block: ProseMirrorNode, pos: number, decorations: Decoration[]) => void;
    /**
     * A method that is called when a block is autohighlighted with the detected language passed; useful for caching the detected language for future use
     * @param block The node that was renderer
     * @param pos The position of the node in the document
     * @param detectedLanguage The language that was detected during autohighlight
     */
    autohighlightCallback?: (block: ProseMirrorNode, pos: number, detectedLanguage: string | undefined) => void;
}
/**
 * Gets all highlighting decorations from a ProseMirror document
 * @param doc The doc to search applicable blocks to highlight
 * @param hljs The pre-configured highlight.js instance to use for parsing
 * @param nodeTypes An array containing all the node types to target for highlighting
 * @param languageExtractor A method that is passed a prosemirror node and returns the language string to use when highlighting that node
 * @param options The options to alter the behavior of getHighlightDecorations
 */
export declare function getHighlightDecorations(doc: ProseMirrorNode, hljs: HLJSApi, nodeTypes: string[], languageExtractor: (node: ProseMirrorNode) => string | null, options?: GetHighlightDecorationsOptions): Decoration[];
export {};
