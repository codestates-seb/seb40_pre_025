import type { HLJSApi } from "highlight.js";
import { Node as ProseMirrorNode } from "prosemirror-model";
import { Plugin, Transaction } from "prosemirror-state";
import type { Mapping } from "prosemirror-transform";
import { Decoration, DecorationSet } from "prosemirror-view";
declare module "prosemirror-view" {
    interface Decoration {
        map: (mapping: Mapping, offset: number, oldOffset: number) => Decoration;
    }
}
/** Describes the current state of the highlightPlugin  */
export interface HighlightPluginState {
    cache: DecorationCache;
    decorations: DecorationSet;
    autodetectedLanguages: {
        node: ProseMirrorNode;
        pos: number;
        language: string | undefined;
    }[];
}
/** Represents a cache of doc positions to the node and decorations at that position */
export declare class DecorationCache {
    private cache;
    constructor(cache: {
        [pos: number]: {
            node: ProseMirrorNode;
            decorations: Decoration[];
        };
    });
    /**
     * Gets the cache entry at the given doc position, or null if it doesn't exist
     * @param pos The doc position of the node you want the cache for
     */
    get(pos: number): {
        node: ProseMirrorNode;
        decorations: Decoration[];
    };
    /**
     * Sets the cache entry at the given position with the give node/decoration values
     * @param pos The doc position of the node to set the cache for
     * @param node The node to place in cache
     * @param decorations The decorations to place in cache
     */
    set(pos: number, node: ProseMirrorNode, decorations: Decoration[]): void;
    /**
     * Removes the value at the oldPos (if it exists) and sets the new position to the given values
     * @param oldPos The old node position to overwrite
     * @param newPos The new node position to set the cache for
     * @param node The new node to place in cache
     * @param decorations The new decorations to place in cache
     */
    replace(oldPos: number, newPos: number, node: ProseMirrorNode, decorations: Decoration[]): void;
    /**
     * Removes the cache entry at the given position
     * @param pos The doc position to remove from cache
     */
    remove(pos: number): void;
    /**
     * Invalidates the cache by removing all decoration entries on nodes that have changed,
     * updating the positions of the nodes that haven't and removing all the entries that have been deleted;
     * NOTE: this does not affect the current cache, but returns an entirely new one
     * @param tr A transaction to map the current cache to
     */
    invalidate(tr: Transaction): DecorationCache;
}
/**
 * Creates a plugin that highlights the contents of all nodes (via Decorations) with a type passed in blockTypes
 * @param hljs The pre-configured instance of highlightjs to use for parsing
 * @param nodeTypes An array containing all the node types to target for highlighting
 * @param languageExtractor A method that is passed a prosemirror node and returns the language string to use when highlighting that node; defaults to using `node.attrs.params`
 * @param languageSetter A method that is called after language autodetection of a node in order to save a autohighlight value for future use
 */
export declare function highlightPlugin(hljs: HLJSApi, nodeTypes?: string[], languageExtractor?: (node: ProseMirrorNode) => string, languageSetter?: (tr: Transaction, node: ProseMirrorNode, pos: number, language: string | undefined) => Transaction | null): Plugin<HighlightPluginState>;
