/**
 * Creates a link entry that opens a _blank to href when clicked
 * @param iconName The html of the svg to use as the icon
 * @param title The text to place in the link's title attribute
 * @param href The href to open when clicked
 * @param key A unique identifier used for this link
 * @internal
 */
export function makeMenuLinkEntry(iconName, title, href, key) {
    const dom = document.createElement("a");
    dom.className = `s-editor-btn s-btn flex--item js-editor-btn js-${key}`;
    dom.href = href;
    dom.target = "_blank";
    dom.title = title;
    dom.setAttribute("aria-label", title);
    dom.dataset.controller = "s-tooltip";
    dom.dataset.sTooltipPlacement = "top";
    // create the svg icon-bg element
    const icon = document.createElement("span");
    icon.className = "icon-bg icon" + iconName;
    dom.append(icon);
    const command = {
        command: (_, dispatch) => {
            if (dispatch) {
                window.open(dom.href, dom.target);
            }
            return !!href;
        },
        active: () => false,
    };
    return {
        key: key,
        richText: command,
        commonmark: command,
        display: dom,
    };
}
/**
 * Creates a section with a heading usable for dropdown menus. This is just a visual element with no
 * interaction and no action being triggered on click
 * @param label The text to be displayed for this item
 * @param key A unique identifier used for identifying the command to be executed on click
 * @internal
 */
export function makeDropdownSection(label, key) {
    const section = document.createElement("span");
    section.className = `flex--item ta-left fs-fine tt-uppercase mx12 mb6 mt12 fc-black-400`;
    section.dataset.key = key;
    section.textContent = label;
    const command = {
        command: () => true,
        visible: () => true,
        active: () => false,
    };
    return {
        key: key,
        richText: command,
        commonmark: command,
        display: section,
    };
}
/**
 * Creates a dropdown menu item that can be embedded in a dropdown menu's popover
 * @param title The text to be displayed for this item
 * @param command The command to be executed when this item is clicked
 * @param key A unique identifier used for identifying the command to be executed on click
 * @param cssClasses Additional css classes to be applied to this dropdown item
 * @internal
 */
export function makeDropdownItem(title, command, key, cssClasses) {
    const button = document.createElement("button");
    button.type = "button";
    button.dataset.key = key;
    button.textContent = title;
    button.dataset.action = "s-popover#hide";
    button.className = `s-block-link s-editor--dropdown-item js-editor-btn`;
    if (cssClasses) {
        button.classList.add(...cssClasses);
    }
    return Object.assign(Object.assign({ key: key }, command), { display: button });
}
/**
 * Simple wrapper function to ensure that conditional menu item adds are consistent
 * @param item The item to add if flag is truthy
 * @param flag Whether to add the item
 * @internal
 */
export function addIf(item, flag) {
    return flag ? item : null;
}
/**
 * Helper function to create consistent menu entry doms
 * @param iconName The html of the svg to use as the icon
 * @param title The text to place in the button's title attribute
 * @param key A unique identifier used for identifying the command to be executed on click
 * @param cssClasses extra CSS classes to be applied to this menu icon (optional)
 * @internal
 */
export function makeMenuButton(iconName, title, key, cssClasses) {
    const button = document.createElement("button");
    button.className = `s-editor-btn s-btn js-editor-btn js-${key}`;
    if (cssClasses) {
        button.classList.add(...cssClasses);
    }
    button.title = title;
    button.setAttribute("aria-label", title);
    button.dataset.controller = "s-tooltip";
    button.dataset.sTooltipPlacement = "top";
    button.dataset.key = key;
    button.type = "button";
    // create the svg icon-bg element
    const icon = document.createElement("span");
    icon.className = "icon-bg icon" + iconName;
    button.append(icon);
    return button;
}
/**
 * Create a dropdown menu item that contains all children in its popover
 * @param svg The html of the svg to use as the dropdown icon
 * @param title The text to place in the dropdown button's title attribute
 * @param key A unique identifier used for this dropdown menu
 * @param visible A function that determines wether the dropdown should be visible or hidden
 * @param active A function to determine if the dropdown should be highlighted as active
 * @param children The child MenuCommandEntry items to be placed in the dropdown menu
 * @internal
 */
export function makeMenuDropdown(svg, title, key, visible, active, ...children) {
    const command = {
        command: () => true,
        visible,
        active,
    };
    return {
        key: key,
        display: {
            svg,
            label: title,
        },
        children: children,
        richText: command,
        commonmark: command,
    };
}
