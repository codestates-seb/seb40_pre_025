import type { PartialDeep } from "./utils";
/** Curried helper method that wraps a i18n method for menu entries w/ shortcuts */
declare function shortcut(text: string): (args: {
    shortcut: string;
}) => string;
/** The default set of localizable strings */
export declare const defaultStrings: {
    readonly commands: {
        readonly blockquote: (args: {
            shortcut: string;
        }) => string;
        readonly bold: (args: {
            shortcut: string;
        }) => string;
        readonly code_block: (args: {
            shortcut: string;
        }) => string;
        readonly emphasis: (args: {
            shortcut: string;
        }) => string;
        readonly heading: {
            readonly dropdown: (args: {
                shortcut: string;
            }) => string;
            readonly entry: ({ level }: {
                level: number;
            }) => string;
        };
        readonly help: "Help";
        readonly horizontal_rule: (args: {
            shortcut: string;
        }) => string;
        readonly image: (args: {
            shortcut: string;
        }) => string;
        readonly inline_code: (args: {
            shortcut: string;
        }) => string;
        readonly kbd: (args: {
            shortcut: string;
        }) => string;
        readonly link: (args: {
            shortcut: string;
        }) => string;
        readonly metaTagLink: (args: {
            shortcut: string;
        }) => string;
        readonly moreFormatting: "More formatting";
        readonly ordered_list: (args: {
            shortcut: string;
        }) => string;
        readonly redo: (args: {
            shortcut: string;
        }) => string;
        readonly spoiler: (args: {
            shortcut: string;
        }) => string;
        readonly sub: (args: {
            shortcut: string;
        }) => string;
        readonly sup: (args: {
            shortcut: string;
        }) => string;
        readonly strikethrough: "Strikethrough";
        readonly table_edit: "Edit table";
        readonly table_insert: (args: {
            shortcut: string;
        }) => string;
        readonly table_column: {
            readonly insert_after: "Insert column after";
            readonly insert_before: "Insert column before";
            readonly remove: "Remove column";
        };
        readonly table_row: {
            readonly insert_after: "Insert row after";
            readonly insert_before: "Insert row before";
            readonly remove: "Remove row";
        };
        readonly tagLink: (args: {
            shortcut: string;
        }) => string;
        readonly undo: (args: {
            shortcut: string;
        }) => string;
        readonly unordered_list: (args: {
            shortcut: string;
        }) => string;
    };
    readonly link_editor: {
        readonly cancel_button: "Cancel";
        readonly href_label: "Link URL";
        readonly save_button: "Save";
        readonly text_label: "Link text";
        readonly validation_error: "The entered URL is invalid.";
    };
    readonly link_tooltip: {
        readonly edit_button_title: string;
        readonly remove_button_title: string;
    };
    readonly menubar: {
        readonly mode_toggle_markdown_title: string;
        readonly mode_toggle_preview_title: string;
        readonly mode_toggle_richtext_title: string;
    };
    readonly nodes: {
        readonly codeblock_lang_auto: ({ lang }: {
            lang: string;
        }) => string;
        readonly spoiler_reveal_text: string;
    };
    readonly image_upload: {
        readonly default_image_alt_text: string;
        readonly external_url_validation_error: string;
        readonly upload_error_file_too_big: string;
        readonly upload_error_generic: string;
        readonly upload_error_unsupported_format: string;
        readonly uploaded_image_preview_alt: string;
    };
};
/** Registers new localization strings; any strings that are left unregistered will fall back to the default value */
export declare function registerLocalizationStrings(newStrings: PartialDeep<typeof defaultStrings>): void;
/**
 * Checks the localized strings for a given key and returns the value
 * @param key A dot-separated key to the localized string e.g. "commands.bold"
 * @param params An object of parameters to pass to the localization function if it exists
 */
export declare function _t(key: string, params?: Record<string, unknown>): string;
export {};
