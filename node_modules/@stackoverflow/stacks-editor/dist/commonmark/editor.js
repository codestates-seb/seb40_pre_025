import { history } from "prosemirror-history";
import { EditorState } from "prosemirror-state";
import { EditorView } from "prosemirror-view";
import { log } from "../shared/logger";
import { createMenuPlugin } from "../shared/menu/plugin";
import { createPreviewPlugin } from "./plugins/preview";
import { commonmarkCodePasteHandler } from "../shared/prosemirror-plugins/code-paste-handler";
import { commonmarkImageUpload, defaultImageUploadHandler, } from "../shared/prosemirror-plugins/image-upload";
import { interfaceManagerPlugin } from "../shared/prosemirror-plugins/interface-manager";
import { placeholderPlugin } from "../shared/prosemirror-plugins/placeholder";
import { editableCheck, readonlyPlugin, } from "../shared/prosemirror-plugins/readonly";
import { tripleClickHandler } from "./plugins/triple-click-handler";
import { CodeStringParser } from "../shared/schema";
import { deepMerge } from "../shared/utils";
import { BaseView, defaultParserFeatures, EditorType, } from "../shared/view";
import { allKeymaps } from "./key-bindings";
import { commonmarkSchema } from "./schema";
import { textCopyHandlerPlugin } from "./plugins/text-copy-handler";
import { markdownHighlightPlugin } from "./plugins/markdown-highlight";
import { createMenuEntries } from "../shared/menu";
export class CommonmarkEditor extends BaseView {
    constructor(target, content, pluginProvider, options = {}) {
        super();
        this.options = deepMerge(CommonmarkEditor.defaultOptions, options);
        const menuEntries = pluginProvider.getFinalizedMenu(createMenuEntries(commonmarkSchema, this.options, EditorType.Commonmark), commonmarkSchema);
        const menu = createMenuPlugin(menuEntries, this.options.menuParentContainer, EditorType.Commonmark);
        this.editorView = new EditorView((node) => {
            this.setTargetNodeAttributes(node, this.options);
            target.appendChild(node);
        }, {
            editable: editableCheck,
            state: EditorState.create({
                doc: this.parseContent(content),
                plugins: [
                    history(),
                    ...allKeymaps(this.options.parserFeatures),
                    menu,
                    createPreviewPlugin(this.options.preview),
                    markdownHighlightPlugin(this.options.parserFeatures),
                    interfaceManagerPlugin(this.options.pluginParentContainer),
                    commonmarkImageUpload(this.options.imageUpload, this.options.parserFeatures.validateLink),
                    placeholderPlugin(this.options.placeholderText),
                    readonlyPlugin(),
                    tripleClickHandler,
                    commonmarkCodePasteHandler,
                    textCopyHandlerPlugin,
                    ...pluginProvider.plugins.commonmark,
                ],
            }),
            plugins: [],
        });
        log("prosemirror commonmark document", this.editorView.state.doc.toJSON());
    }
    static get defaultOptions() {
        return {
            // set to null to disable by default
            editorHelpLink: null,
            menuParentContainer: null,
            parserFeatures: defaultParserFeatures,
            placeholderText: null,
            imageUpload: {
                handler: defaultImageUploadHandler,
            },
            preview: {
                enabled: false,
                parentContainer: null,
                renderer: null,
            },
        };
    }
    parseContent(content) {
        return CodeStringParser.fromSchema(commonmarkSchema).parseCode(content);
    }
    serializeContent() {
        return CodeStringParser.toString(this.editorView.state.doc);
    }
}
